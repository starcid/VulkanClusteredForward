#version 450
#extension GL_NV_mesh_shader : require

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 126) out;

#define MAX_LIGHT_NUM 16
layout (std140, binding = 0) uniform TransformData {
    mat4 mvp;
    mat4 model;
    mat4 view;
    mat4 proj;
    mat4 proj_view;
    vec3 cam_pos;
    bool isClusteShading;
    uvec4 tileSizes;
    float zNear;
    float zFar;
    float scale;
    float bias;
} transform;

layout(std140, binding = 1) uniform MaterialData
{
    int has_albedo_map;
    int has_normal_map;
} material;

layout(std140, binding = 2) uniform PointLightData
{
    vec3 pos;
    float radius;
    vec3 color;
    uint enabled;
    float ambient_intensity;
    float diffuse_intensity;
    float specular_intensity;
    float attenuation_constant;
    float attenuation_linear;
    float attenuation_exp;
    vec2 padding;
} pointLight[MAX_LIGHT_NUM];

struct MeshLet{
    uint vertices[64];
    uint indices[378]; // up to 126 triangles
    uint vertex_count;
    uint index_count;
};

layout (std140, binding = 7) readonly buffer meshLetBuf{
    MeshLet meshLets[];
};

struct Vertex {
	vec4 position;
	vec3 color;
	vec3 texcoord;
	vec3 normal;
	vec3 tangent;
	vec3 bitangent;
};

layout (std430, binding = 8) readonly buffer vtxBuf{
    Vertex vertices[];
};

layout(location = 0) out vec3 fragColor[];
layout(location = 1) out vec3 fragTexCoord[];
layout(location = 2) out vec3 fragPos[];
layout(location = 3) out vec3 tanViewPos[];
layout(location = 4) out vec3 tanFragPos[];
layout(location = 5) out vec3 tanLightPos[][16];

void main()
{
    uint mi = gl_WorkGroupID.x;
    uint thread_id = gl_LocalInvocationID.x;
    uint vertex_count = meshLets[mi].vertex_count;

    mat3 normalMatrix = transpose(inverse(mat3(transform.model))); /// maybe have scale
    for (uint i = 0; i < vertex_count; ++i)
    {
        uint vi = meshLets[mi].vertices[i];
        gl_MeshVerticesNV[i].gl_Position = transform.mvp * vertices[vi].position;
        fragColor[i] = vertices[vi].color;
        fragTexCoord[i] = vertices[vi].texcoord;
        fragPos[i] = vec3(transform.model * vertices[vi].position);

        vec3 T = normalize(vec3(normalMatrix * vertices[vi].tangent));
        vec3 N = normalize(vec3(normalMatrix * vertices[vi].normal));
        T = normalize(T - dot(T, N) * N);
        vec3 B = cross(N, T);
        mat3 TBN = mat3(T, B, N);
        TBN = transpose(TBN);
        for(int j = 0; j < MAX_LIGHT_NUM; j++)
            tanLightPos[i][j] = TBN * pointLight[j].pos;
        tanViewPos[i]  = TBN * transform.cam_pos;
        tanFragPos[i]  = TBN * fragPos[i];
    }
    gl_PrimitiveCountNV = uint(vertex_count) / 3;
    for (uint i = 0; i < vertex_count; ++i)
	{
		gl_PrimitiveIndicesNV[i] = uint(meshLets[mi].vertices[i]);
	}
}
