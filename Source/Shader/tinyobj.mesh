#version 450
#extension GL_NV_mesh_shader : require

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 126) out;

#define MAX_LIGHT_NUM 16

layout (std140, binding = 0, set = 0) uniform TransformData {
    mat4 mvp;
    mat4 model;
    mat4 view;
    mat4 proj;
    mat4 proj_view;
    vec3 cam_pos;
    bool isClusteShading;
    uvec4 tileSizes;
    float zNear;
    float zFar;
    float scale;
    float bias;
    vec4 light_pos[MAX_LIGHT_NUM];
} transform;

layout(std140, binding = 1, set = 0) uniform MaterialData
{
    int has_albedo_map;
    int has_normal_map;
} material;

layout(std140, binding = 2, set = 0) uniform PointLightData
{
    vec3 pos;
    float radius;
    vec3 color;
    uint enabled;
    float ambient_intensity;
    float diffuse_intensity;
    float specular_intensity;
    float attenuation_constant;
    float attenuation_linear;
    float attenuation_exp;
    vec2 padding;
} pointLight[MAX_LIGHT_NUM];

struct MeshLet{
    uint vertexCount;
    uint primCount;
    uint vertexBegin;
    uint primBegin;
};

struct Vertex {
	vec4 position;
	vec4 color;
	vec4 texcoord;
	vec4 normal;
	vec4 tangent;
};

layout (std430, binding = 0, set = 1) buffer vtxBuf{
    Vertex vertices[];
};

layout (std430, binding = 1, set = 1) buffer meshLetBuf{
    MeshLet meshLets[];
};

layout (std430, binding = 2, set = 1) buffer vertexIndiceBuf{
    uint vertexIndices[];
};

layout (std430, binding = 3, set = 1) buffer primIndiceBuf{
    uint primIndices[];
};

layout (location = 0) out Interpolants {
    vec3 fragColor;
    vec3 fragTexCoord;
    vec3 fragPos;
    vec3 tanViewPos;
    vec3 tanLightPos[16];
} OUT[];

void main()
{
    uint mi = gl_WorkGroupID.x;
    uint thread_id = gl_LocalInvocationID.x;

    uint vertexCount = meshLets[mi].vertexCount;
    uint primCount = meshLets[mi].primCount;
    uint vertexBegin = meshLets[mi].vertexBegin;
    uint primBegin = meshLets[mi].primBegin;

    for (uint i = 0; i < vertexCount; ++i)
    {
        uint vi = vertexIndices[vertexBegin + i];

        gl_MeshVerticesNV[i].gl_Position = transform.mvp * vertices[vi].position;
        OUT[i].fragColor = vec3(vertices[vi].color);
        OUT[i].fragTexCoord = vec3(vertices[vi].texcoord);
        OUT[i].fragPos = vec3(transform.model * vertices[vi].position);

        vec3 bitangent = cross(vec3(vertices[vi].normal), vec3(vertices[vi].tangent));
        vec3 v =  transform.cam_pos - vec3(vertices[vi].position);
        OUT[i].tanViewPos  = vec3(dot(vec3(vertices[vi].tangent), v), dot(bitangent, v), dot(vec3(vertices[vi].normal), v));
        for(int j = 0; j < MAX_LIGHT_NUM; j++)
        {
            vec3 l = vec3(transform.light_pos[j] - vertices[vi].position);
            OUT[i].tanLightPos[j] = vec3(dot(vec3(vertices[vi].tangent), l), dot(bitangent, l), dot(vec3(vertices[vi].normal), l));
        }
    }

    for (uint i = 0; i < primCount; ++i)
    {
        gl_PrimitiveIndicesNV[i] = primIndices[primBegin + i];
    }

    gl_PrimitiveCountNV = primCount / 3;
}
