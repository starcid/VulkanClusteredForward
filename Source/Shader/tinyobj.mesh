#version 450
#extension GL_NV_mesh_shader : require

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 126) out;

#define MAX_LIGHT_NUM 16
layout (std140, binding = 0) uniform TransformData {
    mat4 mvp;
    mat4 model;
    mat4 view;
    mat4 proj;
    mat4 proj_view;
    vec3 cam_pos;
    bool isClusteShading;
    uvec4 tileSizes;
    float zNear;
    float zFar;
    float scale;
    float bias;
} transform;

layout(std140, binding = 1) uniform MaterialData
{
    int has_albedo_map;
    int has_normal_map;
} material;

layout(std140, binding = 2) uniform PointLightData
{
    vec3 pos;
    float radius;
    vec3 color;
    uint enabled;
    float ambient_intensity;
    float diffuse_intensity;
    float specular_intensity;
    float attenuation_constant;
    float attenuation_linear;
    float attenuation_exp;
    vec2 padding;
} pointLight[MAX_LIGHT_NUM];

struct MeshLet{
    uint vertices[64];
    uint indices[378]; // up to 126 triangles
    uint vertex_count;
    uint index_count;
};

layout (std140, binding = 3) buffer meshLetBuf{
    MeshLet meshLets[];
};

struct Vertex{
    vec4 position;
    vec3 color;
    vec3 texcoord;
    vec3 normal;
    vec3 tangent;
    vec3 bitangent;
};

layout (std430, binding = 4) buffer verticeBuf{
    Vertex vertices[];
};

void main()
{
  uint mi = gl_WorkGroupID.x;
  uint thread_id = gl_LocalInvocationID.x;


  uint vertex_count = mbuf.meshlets[mi].vertex_count;
  for (uint i = 0; i < vertex_count; ++i)
  {
		uint vi = mbuf.meshlets[mi].vertices[i];

		vec4 Pw = transform_ub.ModelMatrix * vb.vertices[vi].position;
		vec4 P = transform_ub.ViewProjectionMatrix * Pw;

    // GL->VK conventions...
    P.y = -P.y;
    P.z = (P.z + P.w) / 2.0;

		gl_MeshVerticesNV[i].gl_Position = P;

    v_out[i].color = vb.vertices[vi].color * vec4(meshletcolors[mi%MAX_COLORS], 1.0);
	}
  
  uint index_count = mbuf.meshlets[mi].index_count;
  gl_PrimitiveCountNV = uint(index_count) / 3;

  for (uint i = 0; i < index_count; ++i)
	{
		gl_PrimitiveIndicesNV[i] = uint(mbuf.meshlets[mi].indices[i]);
	}
}
